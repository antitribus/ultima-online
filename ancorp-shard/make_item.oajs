/*
* @author: Antitribus
* @version: 1.0.0
* @name: make_items
* @description: Macro para fazer qualquer item
* @created_at: 2024-11-02
* @updated_at: 2024-11-02
* @shard: AnCorp Shard
*/

// Instruções: É necessário que seja feito manualmente o primeiro item

/**
* Executa o macro até possuir materiais
*/
function main() {
    var manufacturedItemLimit = 200; // Limite de itens a serem fabricados antes de guardar
    var manufacturedItemName = 'flour sifter'; // Nome do item à ser contruido, bottle, flour_sifter...
    var manufacturedItemColor = 'any'; // Cor do item que será construido
    var manufacturingTimeMs = 6000; // Tempo de fabricação do item
    var manufacturedItem = '0x103E'; // Graphic do item que será construido

    var numberRunePositionHome = 1;
    var numberRunePositionVendor = 18;

    var isSellItems = true; // Habilita venda de itens
    var vendorName = 'Andras'; // Nome do vendedor

    var quantityToGuard = 99999; // Quantidade de itens para guardar no banco

    // Dados de configuração da posição dos objetos na casa
    var home = {
        door: { x: 2289, y: 1495, z: -87 },
        container_materials: { x: 2287, y: 1487, z: -84 }
    };

    var objs = [
        { name: 'tool', message: 'Selecione a ferramenta' },
        { name: 'runebook', message: 'Selecione o livro de runas' },
        { name: 'plate', message: 'Selecione a placa da casa' },
        { name: 'door', message: 'Selecione a porta da casa' },
        { name: 'container_materials', message: 'Selecione o container dos materiais' },
        { name: 'container_to_guard', message: 'Selecione o container onde guardar itens' },
    ];

    // Substitua aqui pela a lista dos itens necessários
    const materials = [
        { name: 'iron ingot', type: '0x1BF2', color: '0x0000', quantity: 300, min: 3 }
    ];

    config(objs);

    // Inicia indo para casa
    recall(getSerialByObjectName('runebook'), numberRunePositionHome);
    walkToInsideHome(home, getObjFullName('door'));

    while (true) {
        Orion.ClearJournal();

        if (Orion.InJournal('save')) {
            Orion.Print('Aguardando o mundo ser salvo');
            Orion.Wait(20000);
        }

        if (!hasTool(getObjFullName('tool'))) {
            Orion.Print('Ferramenta não encontrada na backpack');
            return;
        }

        /*    
        if (!hasTool(getObjFullName('container_materials'))) {
            Orion.Print('Container de materiais não encontrado');
            return;
        }

        if (!hasTool(getObjFullName('container_'))) {
            Orion.Print('Container de materiais não encontrado');
            return;
        }

        if (checkMaxManufactoringItems(manufacturedItem, manufacturedItemColor, manufacturedItemLimit)) {
            Orion.Print('Guardando os itens fabricados pelo limite');
            guardManufacturedItems(getObjFullName('container_to_guard'), manufacturedItem, manufacturedItemColor, quantityToGuard);
        }*/

        var hasAll = hasMaterials(getObjFullName('container_materials'), materials);

        if (!hasAll) {
            Orion.Print('Guardando os itens fabricados por falta de materiais');
            guardManufacturedItems(getObjFullName('container_to_guard'), manufacturedItem, manufacturedItemColor, quantityToGuard);

            Orion.Print('Guardando os materiais restantes');
            guardMaterials(getObjFullName('container_to_guard'), materials, quantityToGuard);

            Orion.Say('Você não possui os materiais necessários.');
            return;
        }

        restockMaterials(getObjFullName('container_materials'), materials);

        if (checkMaxWeigthAllow() && checkMaxManufactoringItems(manufacturedItem, manufacturedItemColor, manufacturedItemLimit)) {
            Orion.Print("Fabricando item " + manufacturedItemName);
            Orion.UseObject(getObjFullName('tool'));
            Orion.Wait(1000);

            repeatLastAction(manufacturingTimeMs);
        } else {
            if (isSellItems) {
                recall(getSerialByObjectName('runebook'), numberRunePositionVendor);
                sell(vendorName, manufacturedItemName, manufacturedItem, manufacturedItemColor);
                recall(getSerialByObjectName('runebook'), numberRunePositionHome);
                walkToInsideHome(home, getObjFullName('door'));
                //openHomeBank(getObjFullName('plate'));
                safeGold(getObjFullName('container_to_safe'), 60000);
            } else {
                Orion.Print('Guardando os itens fabricados');
                guardManufacturedItems(getObjFullName('container_to_guard'), manufacturedItem, manufacturedItemColor, quantityToGuard);
            }
        }
    }
}

/**
 * Configuração de objetos
 * @param array objs 
 */
function config(objs) {
    objs.forEach(function (obj) {
        if (!Orion.ObjectExists(obj.name) && !Orion.FindObject(obj.name)) {
            addObject(obj);
        }
    });
}

/**
 * Retorna o serial de um objeto pelo seu nome completo
 * @param string name 
 * @returns 
 */
function getSerialByObjectName(name) {
    return Orion.GetSerial(getObjFullName(name));
}

/**
 * Adiciona um objeto
 * @param array obj 
 */
function addObject(obj) {
    var fullObjName = getObjFullName(obj.name);

    if (!Orion.FindObject(fullObjName)) {
        Orion.CharPrint('self', '0x0010', obj.message);
        Orion.AddObject(fullObjName);
        while (Orion.HaveTarget()) {
            Orion.Wait(20);
        }
    }
}

/**
 * Retorna o nome completo do objeto
 * @param string name 
 * @returns 
 */
function getObjFullName(name) {
    return name + '_' + Player.Name()
}

/**
 * 
 * @param object homeConfig 
 * @param string door 
 */
function walkToInsideHome(homeConfig, door) {
    Orion.Print('Entrando na casa');
    Orion.WalkTo(homeConfig.door.x, homeConfig.door.y, homeConfig.door.z);
    Orion.Wait(2000);
    Orion.UseObject(door);
    Orion.Wait(2000);
    Orion.WalkTo(Player.X(), Player.Y() - 6, Player.Z());
    Orion.Wait(1000);
    Orion.UseObject(door);
    Orion.Wait(1000);
    Orion.WalkTo(homeConfig.container_materials.x, homeConfig.container_materials.y, homeConfig.container_materials.z);
    Orion.Wait(6000);
}

/**
 * Abre o banco da casa pela placa
 * @param string plate 
 */
function openHomeBank(plate) {
    Orion.Wait(1000);
    Orion.UseObject(plate);
    Orion.Wait(1000);

    if (Orion.WaitForGump(1000)) {
        var gump0 = Orion.GetGump('last');
        if ((gump0 !== null)) {
            gump0.Select(Orion.CreateGumpHook(6));
            Orion.Wait(100);
        }
    }
}

/**
 * Guarda o ouro no banco
 */
function safeGold(container, quantity) {
    Orion.Wait(1000);

    moveItems(backpack, container, '0x0EED', 'any', quantity);
    // while (Orion.Count(gold, 'any', backpack) >= 1) {
    //     var finditem = Orion.FindType(gold, 'any', backpack);
    //     Orion.MoveItem(finditem[0], 0, container);
    //     Orion.Wait(500);
    // }

    Orion.Print('Ouro guardado com sucesso');
}

/**
 * Vender itens
 * @param string vendorName 
 * @param string itemName 
 * @param string graphic 
 * @param string color 
 */
function sell(vendorName, itemName, graphic, color) {
    Orion.Print('Iniciando venda de itens para ' + vendorName);

    while (Orion.Count(graphic, color, backpack)) {
        Orion.Print('Mais uma venda realizada para ' + vendorName);
        Orion.Sell(itemName, vendorName);
        Orion.Wait(6000)
    }
}

/**
 * Meditação suficiente para recall
 */
function meditation() {
    while (Player.Mana() < 50) {
        Orion.UseSkill('Meditation');
        Orion.Wait(1000);
    }
}

/**
 * Recall usando um runebook e um número de posição no livro
 * @param string runebookSerial 
 * @param integer numberRunePosition 
 */
function recall(runebookSerial, numberRunePosition) {
    meditation();
    var uid = runebookSerial.replace('x', '');
    Orion.Say('.recall ' + uid + ',' + numberRunePosition);
    Orion.Wait(15000);
}

/**
* Repete a última ação de um gump
* @param integer executionTime 
*/
function repeatLastAction(executionTime) {
    Orion.ClearJournal();

    gump0 = Orion.GetGump('last');

    if ((gump0 !== null) && (!gump0.Replayed())) {
        gump0.Select(Orion.CreateGumpHook(5008));
        Orion.Wait(100);
    }

    Orion.WaitJournal('Voce pos|Voce falhou', Orion.Now(), Orion.Now() + executionTime);
}

/**
* Retorna o limite de peso suportado
* @returns integer
*/
function getMaxWeightLimit() {
    return Player.MaxWeight() - 50;
}

/**
* Verifica se chegou ao limite do peso
* @returns boolean
*/
function checkMaxWeigthAllow() {
    var maxWeightAllow = Player.MaxWeight() - 50;
    return Player.Weight() < maxWeightAllow;
}

/**
 * 
 * @param string graphic 
 * @param string color 
 * @param integer limit 
 * @returns boolean
 */
function checkMaxManufactoringItems(graphic, color, limit) {
    return Orion.Count(graphic, color, backpack) < limit;
}

/**
* Verifica quantidade dos itens para pegar e reestocar a bolsa
* @param string container 
* @param array materials 
*/
function restockMaterials(container, materials) {
    materials.forEach(function (material) {
        var hasMaterial = Orion.Count(material.type, material.color, backpack) >= material.min;

        if (!checkMaxWeigthAllow()) {
            Orion.Print('Você está com muitos itens na sua backpack');
            return;
        }

        if (!hasMaterial) {
            Orion.Print('Pegando material ' + material.name);
            moveItems(container, backpack, material.type, material.color, material.quantity);
            Orion.Wait(300);
        }
    });
}

/**
* Guarda os ingredientes no container
* @param string container 
* @param array materials 
* @param integer quantity 
*/
function guardMaterials(container, materials, quantity) {
    materials.forEach(function (material) {
        var hasMaterial = Orion.Count(material.type, material.color, backpack);

        if (hasMaterial) {
            Orion.Print('Guardando material ' + material.name);
            moveItems(backpack, container, material.type, material.color, quantity);
            Orion.Wait(300);
        }
    });
}

/**
* Verifica se tem todos os materiais necessários
* @param string container 
* @param array materials 
*/
function hasMaterials(container, materials) {
    var numErrors = 0;

    Orion.UseObject(container);
    Orion.Wait(500);

    materials.forEach(function (material) {
        var hasMaterial = Orion.Count(material.type, material.color, container) >= material.min;

        if (!hasMaterial) {
            Orion.Print('Sem material ' + material.name);
            numErrors++
        }
    });

    return numErrors == 0;
}

/**
* Verifica se tem a ferramenta na bolsa
* @param string tool 
* @returns boolean
*/
function hasTool(tool) {
    return Orion.Count(tool, 'any', backpack) == 0;
}

/**
* Move itens entre containers
* @param string containerOrigin 
* @param string containerDestiny 
* @param string graphic 
* @param string color 
* @param integer quantity 
*/
function moveItems(containerOrigin, containerDestiny, graphic, color, quantity) {
    Orion.UseObject(containerOrigin);
    Orion.Wait(200);
    Orion.DragItemType(graphic, color, containerOrigin, (quantity - Orion.Count(graphic, color, containerDestiny)));
    Orion.Wait(200);
    Orion.DropDraggedItem(containerDestiny, 76, 98);
}

/**
* Guarda os itens da backpack no container
* @param string containerDestiny 
* @param string graphic 
* @param string color 
* @param integer quantity 
*/
function guardManufacturedItems(container, graphic, color, quantity) {
    moveItems(backpack, container, graphic, color, quantity);
}
