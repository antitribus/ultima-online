var limiteXIni = 5300 // Maior valor
var limiteYIni = 1915
var limiteXFim = 5301
var limiteYFim = 1909

var comida = '0x097B'
var minaX = 0, minaY = 0, minaZ = (0), casaX = 6096, casaY = 1359, casaZ = (30), forjaX = 5319, forjaY = 1895, forjaZ = 0, ressX = 1063, ressY = 1431, ressZ = (-90);
var bankX = 5319, bankY = 1895, bankZ = 0
var usePlayerZ = false
var rareOresCor = 'any' // Inferno Chaos order celestial
var typeOres = '0x19B9|0x19B8|0x19B7|0x19BA';
var typeRocks = '0x0F8F|0x1779';
var ignoreOres = /*item:cor*/{
};
var braceleteDeMining = "0x1F06"
var braceleteDeBS = "0x1086"
var typeJoias = '0x0F16|0x0E1F|0x0F26|0x14ED|0x3C2D|0x0F13|0x0F18|0x0F10|0x0F0F|0x0F11|0x0F15';
var typeLingots = '0x1BE3|0x1BEF|0x1BE9|0x1BF5|0x0F8F|0x1363|0x4B4B';
var idRunebook = '0402eb15f'; //ID runebook - Comando .mostraruid
var runaCaveStart = 2, // Numero da primeira runa da mina.
var runaCaveEnd = 5, // Numero da ultima runa da mina.
var runaHome = 10; // Numero da runa da casa/banco.
var pickaxe = '0x0E85', hammer = '0x13E3', shield = '0x1B76'; // type da picareta e do martelo e do shield.
var bauBS='0x4008324E'; //ID bau de ingots/ores
var bauJoias='0x400832FD'; // ID bau de joias
var bauPic='0x4008324E'; //ID bau picareta
var bauReg='0x4008324E';//ID bau de reagents

var local = 1, // 0 p/ casa fora da mina, 1 p/ banco proximo a mina e 2 para recall.
var onSmaltar = 1; // 0 para guardar ores e 1 para guardar lingotes.
var SmaltarCave = 0; //0 para usar forja na mina e 1 para usar em casa.
var hidd = 0; // 0 = não fica em stealth, 1 = usa stealth.
var guard = 0; // 0 = não chama guards, 1 = chama guards.
var maxWeight = (Player.MaxWeight() - (50)); //Peso Maximo - (Valor definido)

var discarts = ['0x1363']; // types dos itens a serem descartados

var world = '0xFFFFFFFF';

function Autostart() {
	Orion.Wait(2000);
	Orion.CharPrint(self, 906, 'Bom jogo!');
	Orion.Wait(100);
	Orion.Exec('StartMining', true);
	Orion.Wait(100);
	Orion.Exec('guards', true);
	Orion.Wait(100);
	Orion.Exec('autobands')
	Orion.Wait('100')
	Orion.Exec('AntiSuicida')
}


function dropItemFromBag(itemGraphic, itemColor) {
    var items = Orion.FindType(itemGraphic, itemColor, backpack);
    
    if (!items.length) {
        Orion.Print('Item não encontrado na mochila!');
        return;
    }

    for(var i in items) {
    	Orion.MoveItem(items[i], 1, 0, Player.X(), Player.Y(), Player.Z());
    	Orion.Wait(150);
    }
}

function discart() {
	for(var i in discarts) {
		dropItemFromBag(discarts[i], 'any');
	}
}

function StartMining() {
	while (true) {
		CheckDead();
		CheckPickaxe(1);
		CheckWeight();
		if (Orion.ValidateTargetTileRelative('cave', 0, 0)) {
			if (Orion.HaveTarget())
				Orion.CancelWaitTarget();
		} else
			LocMov(1);
			while (!Player.Dead()) {
				Move();
				comerComida();
				if (braceleteDeMining && braceleteDeMining != ""){
					Orion.UseType(braceleteDeMining)
				}
				verificaLimite();
				CheckWeight();
				//CheckPickaxe(1);
				Cave();
			}
	}
}

function comerComida() {
	Orion.UseType(comida);
}

function guards() {
	if (guard == 1) {
		while (true) {
			if (Player.Hits() < Player.MaxHits()) {
				Orion.Say('Guards');
				Orion.BandageSelf();
				Orion.Wait(5000);
			}
		}
	}
}
function verificaLimite() {
	if (Player.X() <= limiteXIni) {
		Orion.OpenDoor(true);
		Orion.Print(null, "Verificando limite")
		//Orion.WalkTo(minaX, minaY, Player.Z(), 0, 255, 1, 1);
		Orion.WalkTo(5314, 1906);
		Orion.Wait(3000)
		Orion.CharPrint('self', '11', 'Voltou ao centro da mina');
	}
}

function Hidd() {
	while (!Player.Hidden()) {
		if (!Player.Hidden()) {
			Move();
			if (Player.WarMode(1))
				Orion.WarMode(0);
			Orion.UseSkill('Hiding');
			Orion.WaitJournal('Voce ficou|Voce nao|Skill Hiding', Orion.Now(), Orion.Now() + 7000);
		}
		if (Player.Hidden()) {
			Orion.UseSkill('Stealth');
			Orion.WaitJournal('Voce nao|Voce comeca|invisivel|Skill Hiding', Orion.Now(), Orion.Now() + 7000);
		}
	}
}

function Move() {
	Orion.WalkTo(Player.X() + Orion.Random(-2, 2), Player.Y() + Orion.Random(-2, 2), Player.Z(), 0);
	if (hidd == 1) {
		if (Player.Hidden()) {
			Orion.UseSkill('Stealth');
			Orion.WaitJournal('Voce nao|Voce comeca|invisivel|Skill Hiding', Orion.Now(), Orion.Now() + 7000);
		}
	}
}

function ignoreOresFunc() {
	for (var key in ignoreOres) {
		if (ignoreOres.hasOwnProperty(key)) {
			while (Orion.Count(key, ignoreOres[key], backpack) > 0) {
				var ores = Orion.FindType(key, ignoreOres[key], backpack);
				for (var i = 0; i <= ores.length; i++) {
					Orion.DragItem(ores[0],0);
					Orion.Wait(1000);
					Orion.DropDraggedItemRelative(0, 0, Player.Z());
					Orion.Wait(1000);
				}
			}
		}
	}
}

function Cave() {
	ignoreOresFunc();
	discart();
	for (var x = -1; x <= 1; x++) {
		for (var y = -1; y <= 1; y++) {
			if (hidd == 1)
				Hidd();
			verificaLimite();
			if (Orion.ValidateTargetTileRelative('any', x, y, Player.Z() - 0 ? 0 : Player.Z())) {
				if (Orion.HaveTarget())
					Orion.CancelWaitTarget();
			} else {
				if (local == 2) {
					LocMov(1);
				} else {
					Orion.WalkTo(minaX, minaY);
				}
			}
			Orion.ClearJournal();
			discart();
			Orion.WaitTargetTileRelative('any', x, y, Player.Z() - 0 ? 0 : Player.Z());
			Orion.UseType(pickaxe);
			verificaLimite();
			Orion.WaitJournal('mexeu|aguardar|Nao ha|Voce pos|You cannot|Sua picareta|current state|a ghost|foi morto|Você coloca|Você colocou|Voce colocou|Você não|Voce nao|Tente minerar|You cannot|You are|cadáver|Você cava|Não há|You put|You loosen|There is|You have|Try mining', Orion.Now(), (Orion.Now() + 14000), 'my|sys')
			if (Orion.InJournal('current state|a ghost')) {
				Orion.Wait(500);
				return;
			}
			Orion.Wait(50);
		}
	}
}

function CheckWeight() {
	var weight = Player.Weight();
	if (weight >= maxWeight) {
		if (local == 1)
			LocMov(0);
		else
			LocMov(0);
		if (onSmaltar == 1)
			smaltar();
		OpenBank();
		//CheckReg();	
		Guardar();
		LocMov(1);
	}
}

function smaltar() {
	Orion.Print(null,"Smaltar")
	if (braceleteDeBS && braceleteDeBS != ""){
		Orion.UseType(braceleteDeBS)
	}
	if (SmaltarCave == 1)
		LocMov(0);
	Orion.Print(null,"Andando Forja")
	Orion.WalkTo(forjaX, forjaY, forjaY, 0, 255, 1, 1);
	while ((Player.X() != forjaX) && (Player.Y() != forjaY)) {
		Orion.Print(null,"Andando Forja")
		Orion.WalkTo(forjaX, forjaY);
		Orion.Wait(1000);
	}
	while (Orion.Count(typeOres, rareOresCor, backpack) > 0) {
		Orion.UseType(hammer);
		var ores = Orion.FindType(typeOres, rareOresCor, backpack);
		for (var i = 0; i <= ores.length; i++) {
			Orion.UseObject(ores[i]);
			Orion.Wait(50);
		}
	}
	ignoreOresFunc()

	var gump0 = Orion.GetGump('last');
	if (gump0 != null){
		gump0.Select(Orion.CreateGumpHook(0));
	}
	if (braceleteDeMining && braceleteDeMining != ""){
			Orion.UseType(braceleteDeMining)
		}
	
}

function Guardar() {
	Orion.Print(null,"Guardar")
	while (Orion.Count(typeOres, 'any', backpack) >= 1) {
		var finditem = Orion.FindType(typeOres, 'any', backpack);
		for (i = 0; i < finditem.length; i++) {
			Orion.MoveItem(finditem[i], 0, bauBS);
			Orion.Wait(500);
		}
		Orion.Wait(100);
	}
	while (Orion.Count(typeLingots, 'any', backpack) >= 1) {
		var finditem = Orion.FindType(typeLingots, 'any', backpack);
		for (i = 0; i < finditem.length; i++) {
			Orion.MoveItem(finditem[i], 0, bauBS);
			Orion.Wait(500);
		}
		Orion.Wait(100);
	}
	
	while (Orion.Count(typeJoias, 'any', backpack) >= 1) {
		var finditem = Orion.FindType(typeJoias, 'any', backpack);
		for (i = 0; i < finditem.length; i++) {
			Orion.MoveItem(finditem[i], 0, bauJoias);
			Orion.Wait(500);
		}
		Orion.Wait(100);
	}
	
	while (Orion.Count(typeRocks, 'any', backpack) >= 1) {
		var finditem = Orion.FindType(typeRocks, 'any', backpack);
		for (i = 0; i < finditem.length; i++) {
			Orion.MoveItem(finditem[i], 0, bauBS);
			Orion.Wait(500);
		}
		Orion.Wait(100);
	}
	
	//CheckPickaxe(1);
}

function OpenBank() {
	Orion.Print(null,"OpenBank")
	Orion.WalkTo(bankX, bankY);
	while ((Player.X() != bankX) && (Player.Y() != bankY)) {
		Orion.WalkTo(bankX, bankY);
		Orion.Wait(1000);
	}
	Orion.SetTimer('openBank');
	Orion.ClearJournal();
	var placa = Orion.FindType('0x0BD2', 'any', ground, 'fast ', 14);

	if (placa.length) {
		Orion.UseObject(placa);
		Orion.WaitGump(Orion.CreateGumpHook(6));
	} else {
		Orion.Say('Banker Bank - Buy - Guards - Banco')
	}

	do {
		Orion.Wait(10);
	} while (!Orion.InJournal('Bank Box') && Orion.Timer('openBank') < 800);

	Orion.Boxhack(Player.BankSerial());
}



function CheckPickaxe(x) {
	var qnt = x;
	Orion.Disarm();
	Orion.Wait(100);
	var picks = Orion.FindType(pickaxe, 'any', backpack);
	if (picks.length < qnt) {
		var x = (qnt - picks.length);
		LocMov(0);
		OpenBank();
		Orion.UseObject(bauPic);
		Orion.Wait(100);
		var picks = Orion.FindType(pickaxe, 'any', bauPic);
		if (picks.length) {
			for (var i = 0; i < x; i++) {
				Orion.MoveItem(picks[i], x, backpack);
				Orion.Wait(500);
			}
			Orion.UseType(pickaxe);
			LocMov(1);
		} else
			Orion.Terminate('StartMining');
	}
	Orion.UseType(pickaxe);
}


function CheckDead() {
	if (Player.Dead()) {
		Orion.WarMode('0');
		while (Player.Dead()) {
			Orion.HelpGump();
			Orion.WaitForGump(1000);
			var gump0 = Orion.GetGump('last');
			if ((gump0 !== null) && (!gump0.Replayed())) {
				gump0.Select(Orion.CreateGumpHook(1));
				Orion.Wait(100);
			}
			var gump1 = Orion.GetGump('last');
			if ((gump1 !== null) && (!gump1.Replayed())) {
				gump1.Select(Orion.CreateGumpHook(20));
				Orion.Wait(100);
			}
			Orion.Wait(25000);
			gump0 = Orion.GetGump('last');
			if ((gump0 !== null) && (!gump0.Replayed())) {
				gump0.Select(Orion.CreateGumpHook(1));
				Orion.Wait(100);
			}
			Orion.Wait(8000);
		}
		Orion.WalkTo(5342, 1201, 23, 0);
		//OpenBank();
		//CheckReg();
		while (Player.Mana() < Player.MaxMana()) {
			Orion.UseSkill('Meditation');
			Orion.WaitJournal('peace|Você perdeu', Orion.Now(), (Orion.Now() + 2000));
		}
		while ((Player.X() != casaX) && (Player.Y() != casaY)) {
			if ((Math.abs(Player.X() - casaX) > 50) && (Math.abs(Player.Y() - casaY) >= 50)) {
				Orion.Say('.recall ' + idRunebook + ',' + runaHome);
				Orion.Wait(12000);
			} else
				Orion.WalkTo(casaX, casaY,casaZ,0,255,1,1);
		}
	}
}

function CheckReg() {
	Orion.UseObject(bauReg);
	Orion.Wait(500);
	var regs = [
		{ id: '0', name: 'Blood Moss', type: '0x0F7B', qtd: '20' },
		{ id: '1', name: 'Black Pearls', type: '0x0F7A', qtd: '20' },
		{ id: '2', name: 'Mandrake Roots', type: '0x0F86', qtd: '20' },
	];

	for (var i = 0; i < 3; i++) {
		if (Orion.Count(regs[i].type, 'any', 'backpack') < 20) {
			Orion.DragItem(Orion.FindType(regs[i].type, 'any', bauReg), 20 - Orion.Count(regs[i].type, 'any', 'backpack'));
			Orion.Wait('300');
			Orion.DropDraggedItem('backpack');
			Orion.Wait('500');
		}
	}
}

function FindCave() {
	Orion.Print('Procurando caverna')
	while (!Orion.ValidateTargetTileRelative('cave', minaX, minaY)) {
		minaX = Orion.Random(-10, 10);
		minaY = Orion.Random(-10, 10);
		Orion.Wait(50);
	}
}

function LocMov(x) {
	if (x == 0) {
		if (local == 0)
			Orion.WalkTo(casaX, casaY);
		else if (local == 1)
			Orion.WalkTo(casaX, casaY);
		else if (local == 2) {
			while (Player.Mana() < Player.MaxMana()) {
				Orion.UseSkill('Meditation');
				Orion.WaitJournal('peace|Você perdeu', Orion.Now(), (Orion.Now() + 2000));
			}
			while ((Player.X() != casaX) && (Player.Y() != casaY)) {
				if ((Math.abs(Player.X() - casaX) > 10) && (Math.abs(Player.Y() - casaY) >= 10)) {
					Orion.Say('.recall ' + idRunebook + ',' + runaHome);
					Orion.Wait(12000);
					Orion.UseType(pickaxe);
					Orion.CancelTarget();
				} else
					Orion.WalkTo(casaX, casaY);
			}
		} else
			Orion.CharPrint('self', '0x0035', 'Valor da variavel \"local" não definida corretamente!');
	} else {
		if (local == 0) {
			Orion.WalkTo(minaX, minaY);
		} else if (local == 1) {
			Orion.WalkTo(minaX, minaY);
		} else if (local == 2) {
			while (Player.Mana() < Player.MaxMana()) {
				Orion.UseSkill('Meditation');
				Orion.WaitJournal('peace|Você perdeu', Orion.Now(), (Orion.Now() + 2000));
			}
			while (!Orion.ValidateTargetTileRelative('cave', 0, 0)) {
				if (!Orion.ValidateTargetTileRelative('cave', 5, 5)) {
					Orion.Say('.recall ' + idRunebook + ',' + Orion.Random(runaCaveStart, runaCaveEnd + 1));
					Orion.Wait(12000);
					Orion.UseType(pickaxe);
					Orion.CancelTarget();
				} else {
					FindCave();
					Orion.WalkTo(Player.X() + minaX, Player.Y() + minaY, 'any', 0);
				}
			}
		} else
			Orion.CharPrint('self', '0x0035', 'Valor da variavel \"local" não definida corretamente!');
	}
}


function smelt_all() {
	ignoreOresFunc()
	while (Orion.FindType(typeOres, 'any', bauBS).length > 0) {
		ignoreOresFunc()
		smelt_guarda()
		Orion.Wait(500);
	}

}

function smelt_guarda() {
	var findItems0 = Orion.FindType(typeOres, 'any', bauBS);
	if (findItems0.length) {
		Orion.DragItem(findItems0[0], 100);
		Orion.Wait('300');
	}
	Orion.Wait(300);
	Orion.DropDraggedItem('backpack', 72, 85);
	Orion.Wait('500');
	var ores = Orion.FindType(typeOres, 'any', backpack);
	for (var i = 0; i <= ores.length; i++) {
		Orion.UseType(hammer);
		Orion.UseObject(ores[i]);
		Orion.Wait(50);
	}
	while (Orion.Count(typeLingots, 'any', backpack) >= 1) {
		var finditem = Orion.FindType(typeLingots, 'any', backpack);
		for (i = 0; i < finditem.length; i++) {
			Orion.MoveItem(finditem[i], 0, bauBS);
			Orion.Wait(500);
		}
		Orion.Wait(100);
	}
}


function testeRestock() {
	Orion.FindType(typeOres, 'any', backpack);
}
