// Paste your code here :)// Macro de Lumber
//----------------------------------------------------------------------
const tool = '0x0F43'; // tipo do machado
const maxWeight = 295; // Peso maximo
const containerBank = '0x400CBFF0'; // ID do bau no banco para guardar os logs
const food = '0x097B'; // comida
//----------------------------------------------------------------------

const maxSearchDistance = 30;  // Distancia para buscar arvores
const treeWorldLocations = createArr(200, 200); // Maximo de arvores
const msgSuccess = 'Voce colocou';
const msgError = 'Nao ha|falhou';
const msgWait = 'Voce pos|Nao ha|Voce nao';
const discart = true; // para descartar logs comuns

function Autostart() {
    Orion.Exec('Lumber', true);
}

function discartLogs() {
    var list = [
        { id: '1', nome: 'Logs', color: '0x0000', qtd: '300' }
    ];

    for (var i = 0; i < list.length; i++) {
        var ores = Orion.FindType('0x1BDD', list[i].color, backpack);

        for (var j = 0; j < ores.length; j++) {
            Orion.Drop(ores[j], list[i].qtd);
            Orion.Wait(300);
        }
    }

}

function Lumber(ptreeWorldLocation) {
    var treeWorldLocation = ptreeWorldLocation == null ? FindTreesInArea() : ptreeWorldLocation;
    for (c = 0; c < treeWorldLocation.length; c++) {
        Orion.ClearJournal();
        comer();

        if (discart) {
            discartLogs();
        }
        Orion.WalkTo(treeWorldLocation[c][0], treeWorldLocation[c][1], 0, 1, 200, 1); Orion.Wait(1000);
        LumberAgain(treeWorldLocation[c][0], treeWorldLocation[c][1]);
        if (Player.Weight() >= maxWeight) { guardar(); }
        else {
            while (Orion.InJournal(msgSuccess, 0, 0)) {
                LumberAgain(treeWorldLocation[c][0], treeWorldLocation[c][1]);
            }
        }
    }
    Lumber(treeWorldLocation);
}

function FindTreesInArea() {
    var trueWorldLocCounter = 0;
    for (c = (Player.X() - maxSearchDistance); c < (Player.X() + maxSearchDistance + 1); c++) {
        for (d = (Player.Y() - maxSearchDistance); d < (Player.Y() + maxSearchDistance + 1); d++) {
            if (Orion.ValidateTargetTile('tree', c, d)) {
                treeWorldLocations[trueWorldLocCounter][0] = c;
                treeWorldLocations[trueWorldLocCounter][1] = d;
                trueWorldLocCounter++;
            }
        }
    }
    Orion.Print("Arvores encontrada e configurada, total: " + trueWorldLocCounter);
    treeWorldLocations.length = trueWorldLocCounter;
    return treeWorldLocations;
}

function createArr(x, y) {
    var arr = new Array(x);
    for (var c = 0; c < x; c++) { arr[c] = new Array(y); }
    return arr;
}

function LumberAgain(x, y) {
    comer();
    Orion.ClearJournal();
    Orion.EquipT(tool); Orion.UseType(tool);
    Orion.WaitTargetTile('tree', x, y, 0);
    Orion.WaitJournal(msgWait, Orion.Now(), (Orion.Now() + 9000), 'my|sys');
    if (Orion.InJournal(msgSuccess, 0, 0)) { LumberAgain(x, y); }
    else { return; }
}

function OpenBank() { Orion.Say('banker bank'); Orion.Wait(500); }

function guardar() {
    Orion.WalkTo(2514, 549, 0);
    OpenBank();
    while (Orion.Count('0x1BDD', 'any', backpack) >= 1) {
        var finditem = Orion.FindType('0x1BDD', 'any', backpack);
        for (i = 0; i < finditem.length; i++) {
            Orion.MoveItem(finditem[i], 0, containerBank); Orion.Wait(700);
        }
        Orion.Wait(100);
    }
}

function comer() {
    Orion.UseType(food);
    Orion.Wait(200);
}

function guardLogsHF() {
    var containerLogs = '0x40052AB1';
    var containerDestiny = '0x400B509D';

    if (Player.Name().toLowerCase() == 'mu de aries') {
        containerLogs = '0x40052AB4';
    }

    if (Player.Name().toLowerCase() == 'shun de andromeda') {
        containerLogs = '0x400CBFF0';
    }

    while (Orion.FindType('0x1BDD', 'any', containerLogs)) {
        var logs = Orion.FindType('0x1BDD', 'any', containerLogs);

        for (var j = 0; j < logs.length; j++) {
            Orion.MoveItem(logs[j], 800, containerDestiny);
            Orion.Wait(1000);
        }
    }
}
